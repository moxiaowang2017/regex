// 正则表达式字符匹配攻略
// 重点：
/**
 * 1.{m,n} 模式  表示连续出现最少m次，最多n次
 * 2.[abc] 模式  表示该字符是可以字符“a”、“b”、“c”中的任何一个
 * 3.简写字典:
 *  // \d就是[0-9]。表示是一位数字。记忆方式：其英文是digit（数字）。
    // \D就是[^0-9]。表示除数字外的任意字符。
    // \w就是[0-9a-zA-Z_]。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。
    // \W是[^0-9a-zA-Z_]。非单词字符。
    // \s是[ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。
    // \S是[^ \t\v\n\r\f]。 非空白符。
    // .就是[^\n\r\u2028\u2029]。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号...中的每个点，都可以理解成占位符，表示任何类似的东西。

    // {m,} 表示至少出现m次。
    // {m} 等价于{m,m}，表示出现m次。
    // ? 等价于{0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？
    // + 等价于{1,}，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。
    // * 等价于{0,}，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。
 */



 
// 正则表达式是匹配模式，要么匹配字符，要么匹配位置
// 1.1.横向模糊匹配 (横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。)

{
    // *{m,n}，表示连续出现最少m次，最多n次 
    var regex = /ab{2,5}c/g;
    var string = "abc abbc abbbc abbbbc abbbbbc abbbbbbc";
    console.log(string.match(regex));
    // => ["abbc", "abbbc", "abbbbc", "abbbbbc"]

    // 注: 1./ab{2,5}c/表示匹配这样一个字符串：第一个字符是“a”，接下来是2到5个字符“b”，最后是字符“c”
    // g: 目标字符串中按顺序找到满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个”

}
// 1.2.纵向模糊匹配(纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。)
{
    // *[abc] 表示该字符是可以字符“a”、“b”、“c”中的任何一个
    var regex = /a[123]b/g;
    var string = "a0b a1b a2b a3b a4b";
    console.log(string.match(regex));
    // => ["a1b", "a2b", "a3b"]

}

// 2.字符组[abc] 纵向模糊匹配
// 2.1.范围表示法
{
    // 用连字符-来省略和简写
    // [123456abcdefGHIJKLM] => [1-6a-fG-M]
}
// 2.2 排除字符组
{
    // [^abc]:除"a"、"b"、"c"之外的任意一个字符
}
// 2.3 常见的简写形式
{
    // \d就是[0-9]。表示是一位数字。记忆方式：其英文是digit（数字）。
    // \D就是[^0-9]。表示除数字外的任意字符。
    // \w就是[0-9a-zA-Z_]。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。
    // \W是[^0-9a-zA-Z_]。非单词字符。
    // \s是[ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。
    // \S是[^ \t\v\n\r\f]。 非空白符。
    // .就是[^\n\r\u2028\u2029]。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号...中的每个点，都可以理解成占位符，表示任何类似的东西。

}
// 3. 量词 {m,n} 
// 3.1 简写形式
{
    // {m,} 表示至少出现m次。
    // {m} 等价于{m,m}，表示出现m次。
    // ? 等价于{0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？
    // + 等价于{1,}，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。
    // * 等价于{0,}，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。
}

// 3.2 贪婪匹配和惰性匹配
{
    var regex = /\d{2,5}/g;
    var string = "123 1234 12345 123456";
    console.log(string.match(regex));
    // => ["123", "1234", "12345", "12345"]
    // 注：/\d{2,5}/，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字
}

{
    var regex = /\d{2,5}?/g;
    var string = "123 1234 12345 123456";
    console.log(string.match(regex));
    // => ["12", "12", "34", "12", "34", "12", "34", "56"]

    // 注：/\d{2,5}?/表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了
}

// 通过在量词后面加个问号就能实现惰性匹配
{
    // {m,n}?
    // {m,}?
    // ??
    // +?
    // *?
}

// 4.多选分支(一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一)
{
    // (p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。
    var regex = /good|nice/g;
    var string = "good idea, nice try.";
    console.log(string.match(regex));
    // => ["good", "nice"]

}

{
    // 分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了
    // 场景1
    var regex = /good|goodbye/g;
    var string = "goodbye";
    console.log(string.match(regex));
    // => ["good"]

    // 场景2
    var regex = /goodbye|good/g;
    var string = "goodbye";
    console.log(string.match(regex));
    // => ["goodbye"]

}


// ======================应用============================
// 5.案例分析
// 5.1匹配16进制颜色值
/** 
 * 分析:
 * 1.表示一个16进制字符，可以用字符组[0-9a-fA-F]。
   2.其中字符可以出现3或6次，需要是用量词和分支结构。
 */
{
    // 
    var regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;
    var string = "#ffbbad #Fc01DF #FFF #ffE";
    console.log(string.match(regex));
    // => ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]

}

// 5.2 匹配时间
/**
 * 分析：
 * 1.共4位数字，第一位数字可以为[0-2]。
   2.当第1位为2时，第2位可以为[0-3]，其他情况时，第2位为[0-9]。
   3.第3位数字为[0-5]，第4位为[0-9]
 */
{
    var regex = /^([01][0-9]|[2][0-3]):[0-5][0-9]$/;
    console.log(regex.test("23:59"));
    console.log(regex.test("02:07"));
    // => true
    // => true
}
// 如果也要求匹配7:9，也就是说时分前面的0可以省略。
{
    var regex = /^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/;
    console.log(regex.test("23:59"));
    console.log(regex.test("02:07"));
    console.log(regex.test("7:9"));
    // => true
    // => true
    // => true
}
// 5.3 匹配日期(比如yyyy-mm-dd格式为例)
/**
 * 分析
 * 1.年，四位数字即可，可用[0-9]{4}。
   2.月，共12个月，分两种情况01、02、……、09和10、11、12，可用(0[1-9]|1[0-2])。
   3.日，最大31天，可用(0[1-9]|[12][0-9]|3[01])。
 */
{
    var regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;
    console.log(regex.test("2017-06-10"));
    // => true
}
// 5.4 window操作系统文件路径
/**
 * 分析:
 * 1.整体模式是: 盘符:\文件夹\文件夹\文件夹\
 * 2.其中匹配F:\，需要使用[a-zA-Z]:\\，其中盘符不区分大小写，注意\字符需要转义。
 * 3.文件名或者文件夹名，不能包含一些特殊字符，此时我们需要排除字符组[^\\:*<>|"?\r\n/]来表示合法字符。
 * 4.另外不能为空名，至少有一个字符，也就是要使用量词+。因此匹配“文件夹\”，可用[^\\:*<>|"?\r\n/]+\\。
 * 5.另外“文件夹\”，可以出现任意次。也就是([^\\:*<>|"?\r\n/]+\\)*。其中括号提供子表达式。
 * 6.路径的最后一部分可以是“文件夹”，没有\，因此需要添加([^\\:*<>|"?\r\n/]+)?。
 */
{
    var regex = /^[a-zA-Z]:\\([^\\:*<>|"?\r\n/]+\\)*([^\\:*<>|"?\r\n/]+)?$/;
    console.log(regex.test("F:\\study\\javascript\\regex\\regular expression.pdf"));
    console.log(regex.test("F:\\study\\javascript\\regex\\"));
    console.log(regex.test("F:\\study\\javascript"));
    console.log(regex.test("F:\\"));
    // => true
    // => true
    // => true
    // => true
}
// 5.5 匹配id (要求从<div id="container" class="main"></div>提取出id="container"。)
// 第一种：
{
    var regex = /id=".*"/
    var string = '<div id="container" class="main"></div>';
    console.log(string.match(regex)[0]);
    // => id="container" class="main"
    // 注：量词*又是贪婪的，当遇到container后面双引号时，不会停下来，会继续匹配，直到遇到最后一个双引号为止
}
// 第二种
{
    var regex = /id=".*?"/
    var string = '<div id="container" class="main"></div>';
    console.log(string.match(regex)[0]);
    // => id="container"
    // 注：效率比较低，因为其匹配原理会涉及到“回溯”这个概念
}
// 第三种
{
    var regex = /id="[^"]*"/
    var string = '<div id="container" class="main"></div>';
    console.log(string.match(regex)[0]);
    // => id="container"
}


